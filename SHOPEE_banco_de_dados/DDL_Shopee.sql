Drop schema if exists SHOPPE cascade;
create schema SHOPEE;
set search_path = SHOPEE;

CREATE TABLE STORE
(
StoreID CHAR(4) NOT NULL,
StoreName VARCHAR(50) NOT NULL,
StoreAddress VARCHAR(100) NOT NULL,
StoreDescription VARCHAR(300),
PRIMARY KEY (StoreID)
);


CREATE TABLE PRODUCT
(
ProductID CHAR(4) NOT NULL,
StoreID CHAR(4) NOT NULL,
ProductName VARCHAR(100) NOT NULL,
ProductPrice money NOT NULL,
ProductDescription VARCHAR(300),
FOREIGN KEY (StoreID) REFERENCES STORE(StoreID),
PRIMARY KEY (ProductID, StoreID)
);


CREATE TABLE CATEGORY
(
CategoryID CHAR(4) NOT NULL,
CategoryName VARCHAR(25) NOT NULL,
PRIMARY KEY (CategoryID)
);


CREATE TABLE CATAGGREGATEPR
(
StoreID CHAR(4) NOT NULL,
ProductID CHAR(4) NOT NULL,
CategoryID CHAR(4) NOT NULL,
FOREIGN KEY (CategoryID) REFERENCES CATEGORY(CategoryID),
FOREIGN KEY (ProductID, StoreID) REFERENCES PRODUCT(ProductID, StoreID),
PRIMARY KEY (CategoryID, ProductID, StoreID)
);


CREATE TABLE STOCK
(
ProductID CHAR(4) NOT NULL,
StoreID CHAR(4) NOT NULL,
Quantity INT NOT NULL,
FOREIGN KEY (ProductID, StoreID) REFERENCES PRODUCT(ProductID, StoreID),
PRIMARY KEY (ProductID, StoreID)
);


CREATE TABLE "USER"
(
UserID CHAR(4) NOT NULL,
UserName VARCHAR(100) NOT NULL,
UserPhone VARCHAR(15) NOT NULL,
UserGender BOOLEAN NOT NULL,
UserEmail VARCHAR(100) NOT NULL,
UserPassword VARCHAR(20) NOT NULL,
UserMoney money NOT NULL,
UserCoins INT NOT NULL,
PRIMARY KEY (UserID)
);


CREATE TABLE CART
(
UserID CHAR(4) NOT NULL,
CartID CHAR(4) NOT NULL,
FOREIGN KEY (UserID) REFERENCES "USER"(UserID),
PRIMARY KEY (CartID, UserID)
);


CREATE TABLE PRGETINCART
(
ProductID CHAR(4) NOT NULL,
StoreID CHAR(4) NOT NULL,
UserID CHAR(4) NOT NULL,
CartID CHAR(4) NOT NULL,
Quantity INT NOT NULL,
FOREIGN KEY (ProductID, StoreID) REFERENCES PRODUCT(ProductID, StoreID),
FOREIGN KEY (CartID, UserID) REFERENCES CART(CartID, UserID),
PRIMARY KEY (ProductID, StoreID, CartID, UserID)
);


CREATE TABLE REVIEW
(
ReviewID CHAR(4) NOT NULL,
ReviewRating INT NOT NULL,
ReviewDate DATE NOT NULL,
ReviewComment VARCHAR(300) NOT NULL,
ReviewMedia VARCHAR(300),
UserID CHAR(4) NOT NULL,
ProductID CHAR(4) NOT NULL,
StoreID CHAR(4) NOT NULL,
FOREIGN KEY (ProductID, StoreID) REFERENCES PRODUCT(ProductID, StoreID),
FOREIGN KEY (UserID) REFERENCES "USER"(UserID),
PRIMARY KEY (ReviewID)
);


CREATE TABLE CREDITCARD
(
CardNUM CHAR(16) NOT NULL,
CardBank VARCHAR(25) NOT NULL,
CardSecureCode CHAR(30) NOT NULL,
CreditExpiration DATE NOT NULL,
PRIMARY KEY (CardNUM)
);


CREATE TABLE USOWNCC
(
CardNUM CHAR(16) NOT NULL,
UserID CHAR(4) NOT NULL,
FOREIGN KEY (UserID) REFERENCES "USER"(UserID),
FOREIGN KEY (CardNUM) REFERENCES CREDITCARD(CardNUM),
PRIMARY KEY (UserID, CardNUM)
);


CREATE TABLE "ORDER"
(
OrderID CHAR(4) NOT NULL,
CardNUM CHAR(16),
UserID CHAR(4) NOT NULL,
OrderDate DATE NOT NULL,
FOREIGN KEY (UserID) REFERENCES "USER"(UserID),
FOREIGN KEY (CardNUM) REFERENCES CREDITCARD(CardNUM),
PRIMARY KEY (OrderID)
);


CREATE TABLE ORDCONTAINPR
(
OrderID CHAR(4) NOT NULL,
StoreID CHAR(4) NOT NULL,
ProductID CHAR(4) NOT NULL,
Quantity INT NOT NULL,
FOREIGN KEY (OrderID) REFERENCES "ORDER"(OrderID),
FOREIGN KEY (ProductID, StoreID) REFERENCES PRODUCT(ProductID, StoreID),
PRIMARY KEY (OrderID, ProductID, StoreID)
);


CREATE TABLE ADDRESS
(
AddressID CHAR(4) NOT NULL,
Street VARCHAR(30) NOT NULL,
_Number INT NOT NULL,
_State VARCHAR(30) NOT NULL, 
City  VARCHAR(30) NOT NULL,
Country VARCHAR(30) NOT NULL,
ZipCode CHAR(8) NOT NULL,
Complement VARCHAR(20) NOT NULL,
PRIMARY KEY (AddressID)
);


CREATE TABLE USHASAD
(
AddressID CHAR(4) NOT NULL,
UserID CHAR(4) NOT NULL,
FOREIGN KEY (UserID) REFERENCES "USER"(UserID),
FOREIGN KEY (AddressID) REFERENCES ADDRESS(AddressID),
PRIMARY KEY (AddressID, UserID)
);


CREATE TABLE DELIVERY
(
DeliveryID CHAR(4) NOT NULL,
AddressID CHAR(4) NOT NULL,
OrderID CHAR(4) NOT NULL,
DeliveryDeadlineDate DATE NOT NULL,
DeliveryConclusionDate DATE NOT NULL,
DeliveryStartDate DATE NOT NULL,
FOREIGN KEY (AddressID) REFERENCES ADDRESS(AddressID),
FOREIGN KEY (OrderID) REFERENCES "ORDER"(OrderID),
PRIMARY KEY (DeliveryID, AddressID, OrderID)
);